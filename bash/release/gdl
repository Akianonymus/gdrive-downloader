#!/usr/bin/env bash
SELF_SOURCE="true"
_account_name_valid(){
declare name="${1:-}" account_name_regex='^([A-Za-z0-9_])+$'
[[ $name =~ $account_name_regex ]]||return 1
return 0
}
_account_exists(){
declare name="${1:-}" client_id client_secret refresh_token
_account_name_valid "$name"||return 1
_set_value indirect client_id "ACCOUNT_${name}_CLIENT_ID"
_set_value indirect client_secret "ACCOUNT_${name}_CLIENT_SECRET"
_set_value indirect refresh_token "ACCOUNT_${name}_REFRESH_TOKEN"
[[ -z ${client_id:+${client_secret:+$refresh_token}} ]]&&return 1
return 0
}
_all_accounts(){
{ _reload_config&&_handle_old_config;}||return 1
declare all_accounts&&COUNT=0
mapfile -t all_accounts <<<"$(grep -oE '^ACCOUNT_.*_CLIENT_ID' "$CONFIG"|sed -e "s/ACCOUNT_//g" -e "s/_CLIENT_ID//g")"
for account in "${all_accounts[@]}";do
[[ -n $account ]]&&_account_exists "$account"&&{ [[ $COUNT == 0 ]]&&"${QUIET:-_print_center}" "normal" " All available accounts. " "="||:;}&&printf "%b" "$((COUNT+=1)). $account \n"&&_set_value direct "ACC_${COUNT}_ACC" "$account"
done
{ [[ $COUNT -le 0 ]]&&"${QUIET:-_print_center}" "normal" " No accounts configured yet. " "=" 1>&2;}||printf '\n'
return 0
}
_set_new_account_name(){
_reload_config||return 1
declare new_account_name="${1:-}" name_valid
[[ -z $new_account_name ]]&&{
_all_accounts 2>|/dev/null
"${QUIET:-_print_center}" "normal" " New account name: " "="
"${QUIET:-_print_center}" "normal" "Info: Account names can only contain alphabets / numbers / dashes." " "&&printf '\n'
}
until [[ -n $name_valid ]];do
if [[ -n $new_account_name ]];then
if _account_name_valid "$new_account_name";then
if _account_exists "$new_account_name";then
"${QUIET:-_print_center}" "normal" " Warning: Given account ( $new_account_name ) already exists, input different name. " "-" 1>&2
unset new_account_name&&continue
else
export NEW_ACCOUNT_NAME="$new_account_name" ACCOUNT_NAME="$new_account_name"&&name_valid="true"&&continue
fi
else
"${QUIET:-_print_center}" "normal" " Warning: Given account name ( $new_account_name ) invalid, input different name. " "-" 1>&2
unset new_account_name&&continue
fi
else
[[ -t 1 ]]||{ "${QUIET:-_print_center}" "normal" " Error: Not running in an interactive terminal, cannot ask for new account name. " 1>&2&&return 1;}
printf -- "-> \033[?7l"
read -r new_account_name
printf '\033[?7h'
fi
_clear_line 1
done
"${QUIET:-_print_center}" "normal" " Given account name: $NEW_ACCOUNT_NAME " "="
export ACCOUNT_NAME="$NEW_ACCOUNT_NAME"
return 0
}
_delete_account(){
{ _reload_config&&_handle_old_config;}||return 1
declare account="${1:?Error: give account name}" regex config_without_values
if _account_exists "$account";then
regex="^ACCOUNT_${account}_(CLIENT_ID=|CLIENT_SECRET=|REFRESH_TOKEN=|ROOT_FOLDER=|ROOT_FOLDER_NAME=|ACCESS_TOKEN=|ACCESS_TOKEN_EXPIRY=)|DEFAULT_ACCOUNT=\"$account\""
config_without_values="$(grep -vE "$regex" "$CONFIG")"
chmod u+w "$CONFIG"||return 1
printf "%s\n" "$config_without_values" >|"$CONFIG"||return 1
chmod "a-w-r-x,u+r" "$CONFIG"||return 1
"${QUIET:-_print_center}" "normal" " Successfully deleted account ( $account ) from config. " "-"
_reload_config
else
"${QUIET:-_print_center}" "normal" " Error: Cannot delete account ( $account ) from config. No such account exists. " "-" 1>&2
fi
return 0
}
_handle_old_config(){
export CLIENT_ID CLIENT_SECRET REFRESH_TOKEN
[[ -n ${CLIENT_ID:+${CLIENT_SECRET:+$REFRESH_TOKEN}} ]]&&{
declare account_name="default" regex config_without_values count=0
until ! _account_exists "$account_name";do
account_name="$account_name$((count+=1))"
done
regex="^(CLIENT_ID=|CLIENT_SECRET=|REFRESH_TOKEN=|ROOT_FOLDER=|ROOT_FOLDER_NAME=|ACCESS_TOKEN=|ACCESS_TOKEN_EXPIRY=)"
config_without_values="$(grep -vE "$regex" "$CONFIG")"
chmod u+w "$CONFIG"||return 1
printf "%s\n%s\n%s\n%s\n%s\n%s\n" \
"ACCOUNT_${account_name}_CLIENT_ID=\"$CLIENT_ID\"" \
"ACCOUNT_${account_name}_CLIENT_SECRET=\"$CLIENT_SECRET\"" \
"ACCOUNT_${account_name}_REFRESH_TOKEN=\"$REFRESH_TOKEN\"" \
"ACCOUNT_${account_name}_ROOT_FOLDER=\"$ROOT_FOLDER\"" \
"ACCOUNT_${account_name}_ROOT_FOLDER_NAME=\"$ROOT_FOLDER_NAME\"" \
"$config_without_values" >|"$CONFIG"||return 1
chmod "a-w-r-x,u+r" "$CONFIG"||return 1
_reload_config||return 1
}
return 0
}
_check_credentials(){
{ _reload_config&&_handle_old_config;}||return 1
ACCOUNT_NAME="$DEFAULT_ACCOUNT"
if [[ -n $NEW_ACCOUNT_NAME ]];then
_set_new_account_name "$NEW_ACCOUNT_NAME"||return 1
_check_account_credentials "$ACCOUNT_NAME"||return 1
else
if [[ -n $CUSTOM_ACCOUNT_NAME ]];then
if _account_exists "$CUSTOM_ACCOUNT_NAME";then
ACCOUNT_NAME="$CUSTOM_ACCOUNT_NAME"
else
"${QUIET:-_print_center}" "normal" " Error: No such account ( $CUSTOM_ACCOUNT_NAME ) exists. " "-"&&return 1
fi
elif [[ -n $DEFAULT_ACCOUNT ]];then
_account_exists "$DEFAULT_ACCOUNT"||{
_update_config DEFAULT_ACCOUNT "" "$CONFIG"&&unset DEFAULT_ACCOUNT ACCOUNT_NAME&&UPDATE_DEFAULT_ACCOUNT="_update_config"
}
else
UPDATE_DEFAULT_ACCOUNT="_update_config"
fi
if [[ -z $ACCOUNT_NAME ]];then
if _all_accounts 2>|/dev/null&&[[ $COUNT -gt 0 ]];then
if [[ $COUNT -eq 1 ]];then
_set_value indirect ACCOUNT_NAME "ACC_1_ACC"
else
"${QUIET:-_print_center}" "normal" " Above accounts are configured, but default one not set. " "="
if [[ -t 1 ]];then
"${QUIET:-_print_center}" "normal" " Choose default account: " "-"
until [[ -n $ACCOUNT_NAME ]];do
printf -- "-> \033[?7l"
read -r account_name
printf '\033[?7h'
if [[ $account_name -gt 0 && $account_name -le $COUNT ]];then
_set_value indirect ACCOUNT_NAME "ACC_${COUNT}_ACC"
else
_clear_line 1
fi
done
else
printf "%s\n" "Warning: Script is not running in a terminal, choosing first account as default."
_set_value indirect ACCOUNT_NAME "ACC_1_ACC"
fi
fi
else
_set_new_account_name ""||return 1
_check_account_credentials "$ACCOUNT_NAME"||return 1
fi
fi
_check_account_credentials "$ACCOUNT_NAME"||return 1
fi
"${UPDATE_DEFAULT_ACCOUNT:-:}" DEFAULT_ACCOUNT "$ACCOUNT_NAME" "$CONFIG"
[[ -n $CONTINUE_WITH_NO_INPUT ]]||_token_bg_service
return 0
}
_check_account_credentials(){
declare account_name="${1:-}"
{
_check_client ID "$account_name"&&_check_client SECRET "$account_name"&&_check_refresh_token "$account_name"&&_check_access_token "$account_name" check
}||return 1
return 0
}
_check_client(){
declare type="CLIENT_${1:?Error: ID or SECRET}" account_name="${2:-}" \
type_name type_value type_regex valid client message
export client_id_regex='[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com' client_secret_regex='[0-9A-Za-z_-]+'
type_name="${account_name:+ACCOUNT_${account_name}_}$type"
_set_value indirect type_value "$type_name"
_set_value indirect type_regex "${type}_regex"
until [[ -n $type_value && -n $valid ]];do
[[ -n $type_value ]]&&{
if [[ $type_value =~ $type_regex ]];then
[[ -n $client ]]&&{ _update_config "$type_name" "$type_value" "$CONFIG"||return 1;}
valid="true"&&continue
else
{ [[ -n $client ]]&&message="- Try again";}||message="in config ( $CONFIG )"
"${QUIET:-_print_center}" "normal" " Invalid Client $1 $message " "-"&&unset "$type_name" client
fi
}
[[ -z $client ]]&&printf "\n"&&"${QUIET:-_print_center}" "normal" " Enter Client $1 " "-"
[[ -n $client ]]&&_clear_line 1
printf -- "-> "
read -r "${type_name?}"&&client=1
_set_value indirect type_value "$type_name"
done
_set_value direct "$type_name" "$type_value"
_set_value direct "$type" "$type_value"
return 0
}
_check_refresh_token(){
[[ -z ${CLIENT_ID:+$CLIENT_SECRET} ]]&&return 1
declare account_name="${1:-}" \
refresh_token_regex='[0-9]//[0-9A-Za-z_-]+' authorization_code_regex='[0-9]/[0-9A-Za-z_-]+'
declare refresh_token_name="${account_name:+ACCOUNT_${account_name}_}REFRESH_TOKEN" check_error
_set_value indirect refresh_token_value "$refresh_token_name"
[[ -n $refresh_token_value ]]&&{
! [[ $refresh_token_value =~ $refresh_token_regex ]]&&"${QUIET:-_print_center}" "normal" " Error: Invalid Refresh token in config file, follow below steps.. " "-"&&unset refresh_token_value
}
[[ -z $refresh_token_value ]]&&{
printf "\n"&&"${QUIET:-_print_center}" "normal" "If you have a refresh token generated, then type the token, else leave blank and press return key.." " "
printf "\n"&&"${QUIET:-_print_center}" "normal" " Refresh Token " "-"&&printf -- "-> "
read -r refresh_token_value
if [[ -n $refresh_token_value ]];then
"${QUIET:-_print_center}" "normal" " Checking refresh token.. " "-"
if [[ $refresh_token_value =~ $refresh_token_regex ]];then
_set_value direct REFRESH_TOKEN "$refresh_token_value"
{ _check_access_token "$account_name" skip_check&&_update_config "$refresh_token_name" "$refresh_token_value" "$CONFIG"&&_clear_line 1;}||check_error=true
else
check_error=true
fi
[[ -n $check_error ]]&&"${QUIET:-_print_center}" "normal" " Error: Invalid Refresh token given, follow below steps to generate.. " "-"&&unset refresh_token_value
else
"${QUIET:-_print_center}" "normal" " No Refresh token given, follow below steps to generate.. " "-"&&unset refresh_token_value
fi
[[ -z $refresh_token_value ]]&&{
printf "\n"&&"${QUIET:-_print_center}" "normal" "Visit the below URL, tap on allow and then enter the code obtained" " "
URL="https://accounts.google.com/o/oauth2/auth?client_id=$CLIENT_ID&redirect_uri=$REDIRECT_URI&scope=$SCOPE&response_type=code&prompt=consent"
printf "\n%s\n" "$URL"
declare AUTHORIZATION_CODE authorization_code AUTHORIZATION_CODE_VALID response
until [[ -n $AUTHORIZATION_CODE && -n $AUTHORIZATION_CODE_VALID ]];do
[[ -n $AUTHORIZATION_CODE ]]&&{
if [[ $AUTHORIZATION_CODE =~ $authorization_code_regex ]];then
AUTHORIZATION_CODE_VALID="true"&&continue
else
"${QUIET:-_print_center}" "normal" " Invalid CODE given, try again.. " "-"&&unset AUTHORIZATION_CODE authorization_code
fi
}
{ [[ -z $authorization_code ]]&&printf "\n"&&"${QUIET:-_print_center}" "normal" " Enter the authorization code " "-";}||_clear_line 1
printf -- "-> \033[?7l"
read -r AUTHORIZATION_CODE&&authorization_code=1
printf '\033[?7h'
done
response="$(_curl --compressed $CURL_PROGRESS -X POST \
--data "code=$AUTHORIZATION_CODE&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&redirect_uri=$REDIRECT_URI&grant_type=authorization_code" "$TOKEN_URL")"||:
_clear_line 1 1>&2
refresh_token_value="$(_json_value refresh_token 1 1 <<<"$response")"||{ printf "%s\n" "Error: Cannot fetch refresh token, make sure the authorization code was correct."&&return 1;}
_set_value direct REFRESH_TOKEN "$refresh_token_value"
{ _check_access_token "$account_name" skip_check "$response"&&_update_config "$refresh_token_name" "$refresh_token_value" "$CONFIG";}||return 1
}
printf "\n"
}
_set_value direct "$refresh_token_name" "$refresh_token_value"
_set_value direct REFRESH_TOKEN "$refresh_token_value"
return 0
}
_check_access_token(){
[[ -z ${CLIENT_ID:+${CLIENT_SECRET:+$REFRESH_TOKEN}} ]]&&return 1
declare account_name="${1:-}" no_check="${2:-false}" response_json="${3:-}" \
token_name token_expiry_name token_value token_expiry_value response \
access_token_regex='ya29\.[0-9A-Za-z_-]+'
declare token_name="${account_name:+ACCOUNT_${account_name}_}ACCESS_TOKEN"
declare token_expiry_name="${token_name}_EXPIRY"
_set_value indirect token_value "$token_name"
_set_value indirect token_expiry_value "$token_expiry_name"
[[ $no_check == skip_check || -z $token_value || ${token_expiry_value:-0} -lt "$(printf '%(%s)T\n' "-1")" || ! $token_value =~ $access_token_regex ]]&&{
response="${response_json:-$(_curl --compressed -s -X POST --data \
"client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&refresh_token=$REFRESH_TOKEN&grant_type=refresh_token" "$TOKEN_URL")}"||:
if token_value="$(_json_value access_token 1 1 <<<"$response")";then
token_expiry_value="$(($(printf '%(%s)T\n' "-1")+$(_json_value expires_in 1 1 <<<"$response")-1))"
_update_config "$token_name" "$token_value" "$CONFIG"||return 1
_update_config "$token_expiry_name" "$token_expiry_value" "$CONFIG"||return 1
else
"${QUIET:-_print_center}" "justify" "Error: Something went wrong" ", printing error." "=" 1>&2
printf "%s\n" "$response" 1>&2
return 1
fi
}
_set_value direct ACCESS_TOKEN "$token_value"
_set_value direct ACCESS_TOKEN_EXPIRY "$token_expiry_value"
_set_value direct INITIAL_ACCESS_TOKEN "$ACCESS_TOKEN"
return 0
}
_reload_config(){
{ [[ -r $CONFIG ]]&&. "$CONFIG";}||{ printf "" >>"$CONFIG"||return 1;}
return 0
}
_token_bg_service(){
[[ -z $MAIN_PID ]]&&return 0
printf "%b\n" "ACCESS_TOKEN=\"$ACCESS_TOKEN\"\nACCESS_TOKEN_EXPIRY=\"$ACCESS_TOKEN_EXPIRY\"" >|"${TMPFILE}_ACCESS_TOKEN"
{
until ! kill -0 "$MAIN_PID" 2>|/dev/null 1>&2;do
. "${TMPFILE}_ACCESS_TOKEN"
CURRENT_TIME="$(printf '%(%s)T\n' "-1")"
REMAINING_TOKEN_TIME="$((ACCESS_TOKEN_EXPIRY-CURRENT_TIME))"
if [[ $REMAINING_TOKEN_TIME -le 300 ]];then
CONFIG="${TMPFILE}_ACCESS_TOKEN" _timeout 30 _check_access_token "" skip_check||:
else
TOKEN_PROCESS_TIME_TO_SLEEP="$(if [[ $REMAINING_TOKEN_TIME -le 301 ]];then
printf "0\n"
else
printf "%s\n" "$((REMAINING_TOKEN_TIME-300))"
fi)"
sleep "$TOKEN_PROCESS_TIME_TO_SLEEP"
fi
sleep 1
done
}&
export ACCESS_TOKEN_SERVICE_PID="$!"
return 0
}
export -f _account_name_valid \
_account_exists \
_all_accounts \
_set_new_account_name \
_delete_account \
_handle_old_config \
_check_credentials \
_check_account_credentials \
_check_client \
_check_refresh_token \
_check_access_token \
_reload_config
_actual_size_in_bytes(){
declare file="${1:?Error: give filename}"
{ : "$(BLOCK_SIZE=512 BLOCKSIZE=512 du "$file")"&&: "${_%%$'\t'*}"&&printf "%s\n" "$((_*512))";}||return 1
}
_bytes_to_human(){
declare b="${1:-0}" d='' s=0 S=(Bytes {K,M,G,T,P,E,Y,Z}B)
b="$(printf "%.0f\n" "$b")"
while ((b>1024));do
d="$(printf ".%02d" $((b%1024*100/1024)))"
b=$((b/1024))&&((s++))
done
printf "%s\n" "$b$d ${S[$s]}"
}
_check_bash_version(){
{ ! [[ ${BASH_VERSINFO:-0} -ge 4 ]]&&printf "Bash version lower than 4.x not supported.\n"&&exit 1;}||:
}
_check_debug(){
if [[ -n $DEBUG ]];then
set -x&&PS4='-> '
_print_center(){ { [[ $# == 3 ]]&&printf "%s\n" "$2";}||{ printf "%s%s\n" "$2" "$3";};}
_clear_line(){ :;}&&_move_cursor(){ :;}&&_newline(){ :;}
else
if [[ -z $QUIET ]];then
if _support_ansi_escapes;then
shopt -s checkwinsize&&(:&&:)
if [[ $COLUMNS -lt 45 ]];then
_print_center(){ { [[ $# == 3 ]]&&printf "%s\n" "[ $2 ]";}||{ printf "%s\n" "[ $2$3 ]";};}
else
trap 'shopt -s checkwinsize; (:;:)' SIGWINCH
fi
export EXTRA_LOG="_print_center" CURL_PROGRESS="-#" SUPPORT_ANSI_ESCAPES="true"
else
_print_center(){ { [[ $# == 3 ]]&&printf "%s\n" "[ $2 ]";}||{ printf "%s\n" "[ $2$3 ]";};}
_clear_line(){ :;}&&_move_cursor(){ :;}
fi
_newline(){ printf "%b" "$1";}
else
_print_center(){ :;}&&_clear_line(){ :;}&&_move_cursor(){ :;}&&_newline(){ :;}
fi
set +x
fi
export -f _newline _print_center _clear_line
}
_check_internet(){
"$EXTRA_LOG" "justify" "Checking Internet Connection.." "-"
if ! _timeout 10 _curl -Is google.com;then
_clear_line 1
"${QUIET:-_print_center}" "justify" "Error: Internet connection" " not available." "="
return 1
fi
_clear_line 1
}
_clear_line(){
printf "\033[%sA\033[2K" "$1"
}
_count(){
mapfile -tn 0 lines
printf '%s\n' "${#lines[@]}"
}
_curl(){
curl $CURL_FLAGS "$@"||return 1
}
_display_time(){
declare T="$1"
declare DAY="$((T/60/60/24))" HR="$((T/60/60%24))" MIN="$((T/60%60))" SEC="$((T%60))"
[[ $DAY -gt 0 ]]&&printf '%d days ' "$DAY"
[[ $HR -gt 0 ]]&&printf '%d hrs ' "$HR"
[[ $MIN -gt 0 ]]&&printf '%d minute(s) ' "$MIN"
[[ $DAY -gt 0 || $HR -gt 0 || $MIN -gt 0 ]]&&printf 'and '
printf '%d seconds\n' "$SEC"
}
_get_latest_sha(){
declare LATEST_SHA
case "${1:-$TYPE}" in
branch)\
LATEST_SHA="$(: "$(curl --compressed -s https://github.com/"${3:-$REPO}"/commits/"${2:-$TYPE_VALUE}".atom -r 0-2000)"
: "$(printf "%s\n" "$_"|grep -o 'Commit\/.*<' -m1||:)"&&: "${_##*\/}"&&printf "%s\n" "${_%%<*}")"
;;
release)\
LATEST_SHA="$(: "$(curl -L --compressed -s https://github.com/"${3:-$REPO}"/releases/"${2:-$TYPE_VALUE}")"
: "$(printf "%s\n" "$_"|grep '="/'"${3:-$REPO}""/commit" -m1||:)"&&: "${_##*commit\/}"&&printf "%s\n" "${_%%\"*}")"
esac
printf "%b" "${LATEST_SHA:+$LATEST_SHA\n}"
}
_json_value(){
declare num _tmp no_of_lines
{ [[ $2 -gt 0 ]]&&no_of_lines="$2";}||:
{ [[ $3 -gt 0 ]]&&num="$3";}||{ [[ $3 != all ]]&&num=1;}
_tmp="$(grep -o "\"$1\"\:.*" ${no_of_lines:+-m} $no_of_lines)"||return 1
printf "%s\n" "$_tmp"|sed -e 's/.*"'"$1""\"://" -e 's/[",]*$//' -e 's/["]*$//' -e 's/[,]*$//' -e "s/^ //" -e 's/^"//' -n -e "$num"p||:
}
_move_cursor(){
printf "\033[%sA" "${1:?Error: Num of line}"
}
_print_center(){
[[ $# -lt 3 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
declare -i TERM_COLS="$COLUMNS"
declare type="$1" filler
case "$type" in
normal)declare out="$2"&&symbol="$3";;
justify)if
[[ $# == 3 ]]
then
declare input1="$2" symbol="$3" TO_PRINT out
TO_PRINT="$((TERM_COLS-5))"
{ [[ ${#input1} -gt $TO_PRINT ]]&&out="[ ${input1:0:TO_PRINT}..]";}||{ out="[ $input1 ]";}
else
declare input1="$2" input2="$3" symbol="$4" TO_PRINT temp out
TO_PRINT="$((TERM_COLS*47/100))"
{ [[ ${#input1} -gt $TO_PRINT ]]&&temp+=" ${input1:0:TO_PRINT}..";}||{ temp+=" $input1";}
TO_PRINT="$((TERM_COLS*46/100))"
{ [[ ${#input2} -gt $TO_PRINT ]]&&temp+="${input2:0:TO_PRINT}.. ";}||{ temp+="$input2 ";}
out="[$temp]"
fi
;;
*)return 1
esac
declare -i str_len=${#out}
[[ $str_len -ge $((TERM_COLS-1)) ]]&&{
printf "%s\n" "$out"&&return 0
}
declare -i filler_len="$(((TERM_COLS-str_len)/2))"
[[ $# -ge 2 ]]&&ch="${symbol:0:1}"||ch=" "
for ((i=0; i<filler_len; i++));do
filler="$filler$ch"
done
printf "%s%s%s" "$filler" "$out" "$filler"
[[ $(((TERM_COLS-str_len)%2)) -ne 0 ]]&&printf "%s" "$ch"
printf "\n"
return 0
}
_print_center_quiet(){
{ [[ $# == 3 ]]&&printf "%s\n" "$2";}||{ printf "%s%s\n" "$2" "$3";}
}
_set_value(){
declare mode="${1:?}" var="${2:?}" value="${3:?}"
case "$mode" in
d|direct)export "$var=$value";;
i|indirect)export "$var=${!value}"
esac
}
_support_ansi_escapes(){
{ [[ -t 2 && -n $TERM && $TERM =~ (xterm|rxvt|urxvt|linux|vt|screen) ]]&&return 0;}||return 1
}
_timeout(){
declare timeout="${1:?Error: Specify Timeout}"&&shift
{
"$@"&
child="$!"
trap -- "" TERM
{
sleep "$timeout"
kill "$child"
}&
wait "$child"
} 2>|/dev/null 1>&2
}
_update_config(){
[[ $# -lt 3 ]]&&printf "Missing arguments\n"&&return 1
declare value_name="$1" value="$2" config_path="$3"
! [ -f "$config_path" ]&&: >|"$config_path"
chmod u+w "$config_path"||return 1
printf "%s\n%s\n" "$(grep -v -e "^$" -e "^$value_name=" "$config_path"||:)" \
"$value_name=\"$value\"" >|"$config_path"||return 1
chmod a-w-r-x,u+r "$config_path"||return 1
return 0
}
export -f _actual_size_in_bytes \
_bytes_to_human \
_check_internet \
_clear_line \
_count \
_curl \
_display_time \
_get_latest_sha \
_json_value \
_move_cursor \
_print_center \
_print_center_quiet \
_timeout \
_update_config
_common_stuff(){
if [[ -n $OAUTH_ENABLED ]];then
. "${TMPFILE}_ACCESS_TOKEN"
flag="--header" flag_value="Authorization: Bearer $ACCESS_TOKEN"
url="$API_URL/drive/$API_VERSION/files/$file_id?alt=media&supportsAllDrives=true&includeItemsFromAllDrives=true"
elif [[ -n $API_KEY_DOWNLOAD ]];then
flag="--referer" flag_value="https://drive.google.com"
url="$API_URL/drive/$API_VERSION/files/$file_id?alt=media&supportsAllDrives=true&includeItemsFromAllDrives=true&key=$API_KEY"
else
"$EXTRA_LOG" "justify" "Fetching" " cookies.." "-"
_curl -I $CURL_PROGRESS \
-c "${TMPFILE}_${file_id}_COOKIE" -o /dev/null \
"https://drive.google.com/uc?export=download&id=$file_id"||return 1
for _ in 1 2;do _clear_line 1;done
confirm_string="$(: "$(grep -F 'download_warning' "${TMPFILE}_${file_id}_COOKIE")"&&printf "%s\n" "${_//*$'\t'/}")"||:
url="https://drive.google.com/uc?export=download&id=$file_id${confirm_string:+&confirm=$confirm_string}"
[[ $DOWNLOADER == "aria2c" ]]&&{
cookies="$(sed -e "s/^\# .*//g" -e "s/^\#HttpOnly_//g" "${TMPFILE}_${file_id}_COOKIE")"
printf "%s\n" "$cookies" >|"${TMPFILE}_${file_id}_COOKIE"
flag="--load-cookies" flag_value="${TMPFILE}_${file_id}_COOKIE"
}
fi
return 0
}
_download_with_aria2c(){
[[ $# -lt 3 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
declare file_id="$1" name="$2" server_size="$3" parallel="$4" \
server_size_readable flag flag_value url cookies
server_size_readable="$(_bytes_to_human "$server_size")"
_print_center "justify" "$name" " | ${server_size:+$server_size_readable}" "="
_common_stuff
declare download_status=0
aria2c $ARIA_FLAGS \
"$flag" "$flag_value" \
"$url" -o "$name"||download_status=1
if [[ $download_status -eq 0 ]];then
"${QUIET:-_print_center}" "justify" "Downloaded" "="&&_newline "\n"
rm -f "$name.aria2"
else
"${QUIET:-_print_center}" "justify" "Error: Incomplete" " download." "=" 1>&2
return 1
fi
_log_in_file "$name" "$server_size_readable" "$file_id"
return 0
}
_download_with_curl(){
[[ $# -lt 3 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
declare file_id="$1" name="$2" server_size="$3" parallel="$4" \
range downloaded old_downloaded left speed eta \
flag flag_value url cookies
server_size_readable="$(_bytes_to_human "$server_size")"
_print_center "justify" "$name" " | ${server_size:+$server_size_readable}" "="
if [[ -s $name ]];then
declare local_size&&local_size="$(_actual_size_in_bytes "$name")"
if [[ $local_size -ge $server_size ]];then
"${QUIET:-_print_center}" "justify" "File already present" "="&&_newline "\n"
_log_in_file
return 0
else
_print_center "justify" "File is partially" " present, resuming.." "-"
range="Range: bytes=$local_size-$server_size"
fi
else
[[ $server_size -gt 0 ]]&&range="Range: bytes=0-$server_size"
_print_center "justify" "Downloading file.." "-"
fi
_common_stuff
_curl -Ls \
--header "$range" \
"$flag" "$flag_value" \
"$url" >>"$name"&
pid="$!"
if [[ -n $parallel ]];then
wait "$pid" 2>|/dev/null 1>&2
else
until [[ -f $name ]]||! kill -0 "$pid" 2>|/dev/null 1>&2;do sleep 0.5;done
_newline "\n\n"
until ! kill -0 "$pid" 2>|/dev/null 1>&2;do
downloaded="$(_actual_size_in_bytes "$name")"
left="$((server_size-downloaded))"
speed="$((downloaded-old_downloaded))"
{ [[ $speed -gt 0 ]]&&eta="$(_display_time "$((left/speed))")";}||eta=""
sleep 0.5
_move_cursor 2
_print_center "justify" "Downloaded: $(_bytes_to_human "$downloaded") " "| Left: $(_bytes_to_human "$left")" "="
_print_center "justify" "Speed: $(_bytes_to_human "$speed")/s " "| ETA: ${eta:-Unknown}" "-"
old_downloaded="$downloaded"
done
fi
if [[ $(_actual_size_in_bytes "$name") -ge $server_size ]];then
for _ in 1 2 3;do _clear_line 1;done
"${QUIET:-_print_center}" "justify" "Downloaded" "="&&_newline "\n"
else
"${QUIET:-_print_center}" "justify" "Error: Incomplete" " download." "=" 1>&2
return 1
fi
_log_in_file "$name" "$server_size_readable" "$file_id"
return 0
}
_download_file_main(){
[[ $# -lt 2 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}" 1>&2&&return 1
declare line fileid name size parallel retry="${RETRY:-0}" _sleep&&unset RETURN_STATUS
[[ $1 == parse ]]&&parallel="$3" line="$2" fileid="${line%%"|:_//_:|"*}" \
name="${line##*"|:_//_:|"}" size="$(_tmp="${line#*"|:_//_:|"}"&&printf "%s\n" "${_tmp%"|:_//_:|"*}")"
parallel="${parallel:-$5}"
unset RETURN_STATUS&&until [[ $retry -le 0 && -n $RETURN_STATUS ]];do
if [[ -n $parallel ]];then
"_download_with_$DOWNLOADER" "${fileid:-$2}" "${name:-$3}" "${size:-$4}" true 2>|/dev/null 1>&2&&RETURN_STATUS=1&&break
else
"_download_with_$DOWNLOADER" "${fileid:-$2}" "${name:-$3}" "${size:-$4}"&&RETURN_STATUS=1&&break
fi
sleep "$((_sleep+=1))"
RETURN_STATUS=2 retry="$((retry-1))"&&continue
done
{ [[ $RETURN_STATUS == 1 ]]&&printf "%b" "${parallel:+$RETURN_STATUS\n}";}||printf "%b" "${parallel:+$RETURN_STATUS\n}" 1>&2
return 0
}
_download_folder(){
[[ $# -lt 2 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
declare folder_id="$1" name="$2" parallel="$3"
declare json_search json_search_fragment next_page_token \
error_status success_status files=() folders=() \
files_size files_name files_list num_of_files folders_list num_of_folders
_newline "\n"
"$EXTRA_LOG" "justify" "$name" "="
"$EXTRA_LOG" "justify" "Fetching folder" " details.." "-"
_search_error_message(){
"${QUIET:-_print_center}" "justify" "Error: Cannot" ", fetch folder details." "="
printf "%s\n" "${1:?}"&&return 1
}
if json_search="$("$API_REQUEST_FUNCTION" "files?q=%27$folder_id%27+in+parents&fields=nextPageToken,files(name,size,id,mimeType)&pageSize=1000&orderBy=name")";then
until ! next_page_token="$(_json_value nextPageToken 1 1 <<<"${json_search_fragment:-$json_search}")";do
json_search_fragment="$("$API_REQUEST_FUNCTION" "files?q=%27$folder_id%27+in+parents&fields=nextPageToken,files(name,size,id,mimeType)&pageSize=1000&orderBy=name&pageToken=$next_page_token")"||_search_error_message "$json_search_fragment"
json_search="$json_search
$json_search_fragment"
done
else
_search_error_message "$json_search"
fi&&_clear_line 1
"$EXTRA_LOG" "justify" "Preparing files list.." "="
mapfile -t files <<<"$(printf "%s\n" "$json_search"|grep '"size":' -B3|_json_value id all all)"||:
files_size="$(_json_value size all all <<<"$json_search")"||:
files_name="$(printf "%s\n" "$json_search"|grep size -B2|_json_value name all all)"||:
files_list="$(while read -r -u 4 _id&&read -r -u 5 _size&&read -r -u 6 _name;do
printf "%s\n" "$_id|:_//_:|$_size|:_//_:|$_name"
done 4<<<"$(printf "%s\n" "${files[@]}")" 5<<<"$files_size" 6<<<"$files_name")"
_clear_line 1
[[ -n $INCLUDE_FILES ]]&&files_list="$(grep -E "$INCLUDE_FILES" <<<"$files_list")"
[[ -n $EXCLUDE_FILES ]]&&files_list="$(grep -Ev "$EXCLUDE_FILES" <<<"$files_list")"
"$EXTRA_LOG" "justify" "Preparing sub folders list.." "="
mapfile -t folders <<<"$(printf "%s\n" "$json_search"|grep '"mimeType":.*folder.*' -B2|_json_value id all all)"||:
folders_name="$(printf "%s\n" "$json_search"|grep '"mimeType":.*folder.*' -B1|_json_value name all all)"||:
folders_list="$(while read -r -u 4 _id&&read -r -u 5 _name;do
printf "%s\n" "$_id|:_//_:|$_name"
done 4<<<"$(printf "%s\n" "${folders[@]}")" 5<<<"$folders_name")"
_clear_line 1
for _ in 1 2;do _clear_line 1;done
[[ -z ${files_list[*]:-${folders[*]}} ]]&&_print_center "justify" "$name" " | Empty Folder" "="&&_newline "\n"&&return 0
[[ -n ${files_list[*]} ]]&&num_of_files="$(_count <<<"$files_list")"
[[ -n ${folders[*]} ]]&&num_of_folders="${#folders[@]}"
_print_center "justify" "$name" "${num_of_files:+ | $num_of_files files}${num_of_folders:+ | $num_of_folders sub folders}" "="&&_newline "\n\n"
if [[ -f $name ]];then
name="$name$RANDOM"
fi&&mkdir -p "$name"
cd "$name" 2>|/dev/null 1>&2||exit 1
if [[ -n $num_of_files ]];then
if [[ -n $parallel ]];then
NO_OF_PARALLEL_JOBS_FINAL="$((NO_OF_PARALLEL_JOBS>num_of_files?num_of_files:NO_OF_PARALLEL_JOBS))"
[[ -f "$TMPFILE"SUCCESS ]]&&rm "$TMPFILE"SUCCESS
[[ -f "$TMPFILE"ERROR ]]&&rm "$TMPFILE"ERROR
printf "%s\n" "$files_list"|xargs -P"$NO_OF_PARALLEL_JOBS_FINAL" -I "{}" -n 1 bash -c '
                _download_file_main parse "{}" true
            ' 1>|"$TMPFILE"SUCCESS 2>|"$TMPFILE"ERROR&
pid="$!"
until [[ -f "$TMPFILE"SUCCESS || -f "$TMPFILE"ERROR ]];do sleep 0.5;done
_clear_line 1
until ! kill -0 "$pid" 2>|/dev/null 1>&2;do
success_status="$(_count <"$TMPFILE"SUCCESS)"
error_status="$(_count <"$TMPFILE"ERROR)"
sleep 1
if [[ $((success_status+error_status)) != "$TOTAL" ]];then
printf '%s\r' "$(_print_center "justify" "Status" ": ${success_status:-0} Downloaded | ${error_status:-0} Failed" "=")"
fi
TOTAL="$((success_status+error_status))"
done
_newline "\n"
success_status="$(_count <"$TMPFILE"SUCCESS)"
error_status="$(_count <"$TMPFILE"ERROR)"
_clear_line 1&&_newline "\n"
else
while read -r -u 4 line;do
_download_file_main parse "$line"
: "$((RETURN_STATUS<2?(success_status+=1):(error_status+=1)))"
if [[ -z $VERBOSE ]];then
for _ in 1 2 3 4;do _clear_line 1;done
fi
_print_center "justify" "Status" ": ${success_status:-0} Downloaded | ${error_status:-0} Failed" "="
done 4<<<"$files_list"
fi
fi
for _ in 1 2;do _clear_line 1;done
[[ $success_status -gt 0 ]]&&"${QUIET:-_print_center}" "justify" "Downloaded" ": $success_status" "="
[[ $error_status -gt 0 ]]&&"${QUIET:-_print_center}" "justify" "Failed" ": $error_status" "="
_newline "\n"
if [[ -z $SKIP_SUBDIRS && -n $num_of_folders ]];then
while read -r -u 4 line;do
(_download_folder "${line%%"|:_//_:|"*}" "${line##*"|:_//_:|"}" "${parallel:-}")
done 4<<<"$folders_list"
fi
cd - 2>|/dev/null 1>&2||exit 1
return 0
}
_log_in_file(){
[[ -z $LOG_FILE_ID || -d $LOG_FILE_ID ]]&&return 0
{
printf "%s\n" "Name: $1"
printf "%s\n" "Size: $2"
printf "%s\n\n" "ID: $3"
} >>"$LOG_FILE_ID"
}
export -f _common_stuff \
_download_with_aria2c \
_download_with_curl \
_download_file_main \
_download_folder \
_log_in_file
_api_request(){
_curl --compressed $CURL_PROGRESS \
-e "https://drive.google.com" \
"$API_URL/drive/$API_VERSION/${1:?}&key=$API_KEY&supportsAllDrives=true&includeItemsFromAllDrives=true"||return 1
_clear_line 1 1>&2
}
_api_request_oauth(){
. "${TMPFILE}_ACCESS_TOKEN"
_curl --compressed $CURL_PROGRESS \
-H "Authorization: Bearer $ACCESS_TOKEN" \
"$API_URL/drive/$API_VERSION/${1:?}&supportsAllDrives=true&includeItemsFromAllDrives=true"||return 1
_clear_line 1 1>&2
}
_check_id(){
[[ $# == 0 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
"$EXTRA_LOG" "justify" "Validating URL/ID.." "-"
declare id="$1" json&&unset NAME SIZE
if json="$("$API_REQUEST_FUNCTION" "files/$id?alt=json&fields=name,size,mimeType")";then
if ! _json_value code 1 1 <<<"$json" 2>|/dev/null 1>&2;then
NAME="$(_json_value name 1 1 <<<"$json"||:)"
mime="$(_json_value mimeType 1 1 <<<"$json"||:)"
_clear_line 1
if [[ $mime =~ folder ]];then
FOLDER_ID="$id"
_print_center "justify" "Folder Detected" "="&&_newline "\n"
else
SIZE="$(_json_value size 1 1 <<<"$json"||:)"
FILE_ID="$id"
_print_center "justify" "File Detected" "="&&_newline "\n"
fi
export NAME SIZE FILE_ID FOLDER_ID
else
_clear_line 1&&"${QUIET:-_print_center}" "justify" "Invalid URL/ID" "="&&_newline "\n"
return 1
fi
else
_clear_line 1
"${QUIET:-_print_center}" "justify" "Error: Cannot check URL/ID" "="
printf "%s\n" "$json"
return 1
fi
return 0
}
_extract_id(){
[[ $# == 0 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
declare LC_ALL=C ID="$1"
case "$ID" in
*'drive.google.com'*'id='*)ID="${ID##*id=}"&&ID="${ID%%\?*}"&&ID="${ID%%\&*}";;
*'drive.google.com'*'file/d/'*|'http'*'docs.google.com'*'/d/'*)ID="${ID##*\/d\/}"&&ID="${ID%%\/*}"&&ID="${ID%%\?*}"&&ID="${ID%%\&*}";;
*'drive.google.com'*'drive'*'folders'*)ID="${ID##*\/folders\/}"&&ID="${ID%%\?*}"&&ID="${ID%%\&*}"
esac
printf "%b" "${ID:+$ID\n}"
}
export -f _api_request \
_api_request_oauth \
_check_id \
_extract_id
_usage(){
printf "%b" "
The script can be used to download file/directory from google drive.\n
Usage:\n ${0##*/} [options.. ] <file_[url|id]> or <folder[url|id]>\n
Options:\n
  -aria | --aria-flags 'flags' - Use aria2c to download. '-aria' does not take arguments.\n
      To give custom flags as argument, use long flag, --aria-flags. e.g: --aria-flags '-s 10 -x 10'\n
      Note 1: aria2c can only resume google drive downloads if '-k/--key' or '-o/--oauth' option is used.\n
      Note 2: aria split downloading won't work in normal mode ( without '-k' or '-o' flag ) because it cannot get the remote server size. Same for any other feature which uses remote server size.\n
      Note 3: By above notes, conclusion is, aria is basically same as curl in normal mode, so it is recommended to be used only with '--key' and '--oauth' flag.\n
  -o | --oauth - Use this flag to trigger oauth authentication.\n
      Note: If both --oauth and --key flag is used, --oauth flag is preferred.\n
  -a | --account 'account name' - Use different account than the default one.\n
      To change the default account name, use this format, -a/--account default=account_name\n
  -la | --list-accounts - Print all configured accounts in the config files.\n
  -ca | --create-account 'account name' - To create a new account with the given name if does not already exists.\n
  -da | --delete-account 'account name' - To delete an account information from config file. \n
  -k | --key 'API KEY' ( optional arg ) - To download with api key. If api key is not specified, then the predefined api key will be used.\n
      To save your api key in config file, use 'gdl --key default=your api key'.\n
      API key will be saved in '$HOME/.gdl.conf' and will be used from now on.\n
      Note: If both --key and --key oauth is used, --oauth flag is preferred.\n
  -c | --config 'config file path' - Override default config file with custom config file. Default: $HOME/.gdl.conf\n
  -d | --directory 'foldername' - option to _download given input in custom directory.\n
  -s | --skip-subdirs - Skip downloading of sub folders present in case of folders.\n
  -p | --parallel 'no_of_files_to_parallely_upload' - Download multiple files in parallel.\n
  --proxy 'http://user:password@host:port' - Specify a proxy to use, should be in the format accepted by curl --proxy and aria2c --all-proxy flag.\n
  --speed 'speed' - Limit the download speed, supported formats: 1K and 1M.\n
  -ua | --user-agent 'user agent string' - Specify custom user agent.\n
  -R | --retry 'num of retries' - Retry the file upload if it fails, postive integer as argument. Currently only for file uploads.\n
  -in | --include 'pattern' - Only download the files which contain the given pattern - Applicable for folder downloads.\n
      e.g: ${0##*/} local_folder --include '1', will only include with files with pattern '1' in the name. Regex can be used which works with grep -E command.\n
  -ex | --exclude 'pattern' - Only download the files which does not contain the given pattern - Applicable for folder downloads.\n
      e.g: ${0##*/} local_folder --exclude '1', will only include with files with pattern '1' not present in the name. Regex can be used which works with grep -E command.\n
  -l | --log 'file_to_save_info' - Save downloaded files info to the given filename.\n
  -q | --quiet - Supress the normal output, only show success/error upload messages for files, and one extra line at the beginning for folder showing no. of files and sub folders.\n
  -V | --verbose - Display detailed message (only for non-parallel uploads).\n
  --skip-internet-check - Do not check for internet connection, recommended to use in sync jobs.\n
  $([[ $GDL_INSTALLED_WITH == script ]]&&printf '%s\n' '-u | --update - Update the installed script in your system.\n
  -U | --uninstall - Uninstall script, remove related files.\n
  -V | --version | --info - Show detailed info, only if script is installed system wide.\n')
  -D | --debug - Display script command trace.\n
  -h | --help - Display usage instructions.\n"
exit 0
}
_short_help(){
printf "No valid arguments provided, use -h/--help flag to see usage.\n"
exit 0
}
_version_info(){
if command -v "$COMMAND_NAME" 1>/dev/null&&[[ -n ${REPO:+${COMMAND_NAME:+${INSTALL_PATH:+${TYPE:+$TYPE_VALUE}}}} ]];then
for i in REPO INSTALL_PATH INSTALLATION TYPE TYPE_VALUE LATEST_INSTALLED_SHA CONFIG;do
printf "%s\n" "$i=\"${!i}\""
done|sed -e "s/=/: /g"
else
printf "%s\n" "gdrive-downloader is not installed system wide."
fi
exit 0
}
_cleanup_config(){
declare config="${1:?Error: Missing config}" values_regex
! [ -f "$config" ]&&return 0
while read -r line&&[[ -n $line ]];do
expiry_value_name="${line%%=*}"
token_value_name="${expiry_value_name%%_EXPIRY}"
: "${line##*=}"&&: "${_%\"}"&&expiry="${_#\"}"
[[ $expiry -le "$(printf '%(%s)T\n' "-1")" ]]&&values_regex="${values_regex:+$values_regex|}$expiry_value_name=\".*\"|$token_value_name=\".*\""
done <<<"$(grep -F ACCESS_TOKEN_EXPIRY "$config"||:)"
chmod u+w "$config"&&printf "%s\n" "$(grep -Ev "^\$${values_regex:+|$values_regex}" "$config")" >|"$config"&&chmod "a-w-r-x,u+r" "$config"
return 0
}
_setup_arguments(){
[[ $# == 0 ]]&&printf "%s: Missing arguments\n" "${FUNCNAME[0]}"&&return 1
unset LIST_ACCOUNTS UPDATE_DEFAULT_ACCOUNT CUSTOM_ACCOUNT_NAME NEW_ACCOUNT_NAME DELETE_ACCOUNT_NAME ACCOUNT_ONLY_RUN
unset LOG_FILE_ID OAUTH_ENABLED API_KEY_DOWNLOAD FOLDERNAME SKIP_SUBDIRS NO_OF_PARALLEL_JOBS PARALLEL_DOWNLOAD
unset DEBUG QUIET VERBOSE SKIP_INTERNET_CHECK RETRY SPEED_LIMIT USER_AGENT PROXY
unset ID_INPUT_ARRAY FINAL_INPUT_ARRAY INCLUDE_FILES EXCLUDE_FILES
unset ARIA_FLAGS CURL_FLAGS
export USER_AGENT_FLAG="--user-agent"
export DOWNLOADER="curl"
export CURL_PROGRESS="-s" SPEED_LIMIT_FLAG="--limit-rate" PROXY_FLAG="--proxy" EXTRA_LOG=":"
CONFIG="$HOME/.gdl.conf"
unset ROOT_FOLDER ROOT_FOLDER_NAME CLIENT_ID CLIENT_SECRET REFRESH_TOKEN ACCESS_TOKEN
export API_KEY="AIzaSyD2dHsZJ9b4OXuy5B_owiL8W18NaNOM8tk" \
API_URL="https://www.googleapis.com"
export API_VERSION="v3" \
SCOPE="$API_URL/auth/drive" \
REDIRECT_URI="urn:ietf:wg:oauth:2.0:oob" \
TOKEN_URL="https://accounts.google.com/o/oauth2/token"
_check_longoptions(){
[[ -z $2 ]]&&printf '%s: %s: option requires an argument\nTry '"%s -h/--help"' for more information.\n' "${0##*/}" "$1" "${0##*/}"&&exit 1
return 0
}
while [[ $# -gt 0 ]];do
case "$1" in
-h|--help)_usage;;
-D|--debug)DEBUG="true"&&export DEBUG;;
-u|--update)_check_debug&&_update;;
-U|--uninstall)_check_debug&&_update uninstall;;
-V|--version|--info)_version_info;;
-l|--log)_check_longoptions "$1" "$2"
export LOG_FILE_ID="$2"&&shift
;;
-aria|--aria-flags)command -v aria2c \
1>|/dev/null||{
printf "%s\n" "Error: aria2c not installed."&&exit 1
}
DOWNLOADER="aria2c"
SPEED_LIMIT_FLAG="--max-download-limit"
PROXY_FLAG="--all_proxy"
[[ $1 == "--aria-flags" ]]&&{
_check_longoptions "$1" "$2"
ARIA_FLAGS=" $ARIA_FLAGS $2 "&&shift
}
;;
-o|--oauth)export OAUTH_ENABLED="true";;
-a|--account)export \
OAUTH_ENABLED="true"
_check_longoptions "$1" "$2"
export CUSTOM_ACCOUNT_NAME="${2/default=/}"&&shift
[[ $2 == default* ]]&&export UPDATE_DEFAULT_ACCOUNT="_update_config"
;;
-la|--list-account)export LIST_ACCOUNTS="true";;
-ca|--create-account)export \
OAUTH_ENABLED="true"
_check_longoptions "$1" "$2"
export NEW_ACCOUNT_NAME="$2"&&shift
;;
-da|--delete-account)_check_longoptions "$1" "$2"
export DELETE_ACCOUNT_NAME="$2"&&shift
;;
-k|--key)export \
API_KEY_DOWNLOAD="true"
_API_KEY="${2##default=}"
if [[ $_API_KEY =~ AIza[0-9A-Za-z_-]{35} ]];then
export API_KEY="$_API_KEY"&&shift
[[ -z ${2##default=*} ]]&&UPDATE_DEFAULT_API_KEY="_update_config"
fi
;;
-c|--config)_check_longoptions "$1" "$2"
CONFIG="$2"&&shift
;;
-d|--directory)_check_longoptions "$1" "$2"
export FOLDERNAME="$2"&&shift
;;
-s|--skip-subdirs)export \
SKIP_SUBDIRS="true"
;;
-p|--parallel)_check_longoptions "$1" "$2"
if [[ $2 -gt 0 ]];then
export NO_OF_PARALLEL_JOBS="$2"
else
printf "\nError: -p/--parallel value ranges between 1 to 10.\n"
exit 1
fi
export PARALLEL_DOWNLOAD="parallel"&&shift
;;
--proxy)_check_longoptions "$1" "$2"
export PROXY="$2"&&shift
;;
--speed)_check_longoptions "$1" "$2"
regex='^([0-9]+)([k,K]|[m,M])+$'
if [[ $2 =~ $regex ]];then
export SPEED_LIMIT="$2"&&shift
else
printf "Error: Wrong speed limit format, supported formats: 1K and 1M.\n" 1>&2
exit 1
fi
;;
-ua|--user-agent)_check_longoptions "$1" "$2"
export USER_AGENT="$2"&&shift
;;
-R|--retry)_check_longoptions "$1" "$2"
if [[ $2 -gt 0 ]];then
export RETRY="$2"&&shift
else
printf "Error: -R/--retry only takes positive integers as arguments, min = 1, max = infinity.\n"
exit 1
fi
;;
-in|--include)_check_longoptions "$1" "$2"
export INCLUDE_FILES="${INCLUDE_FILES:+$INCLUDE_FILES|}$2"&&shift
;;
-ex|--exclude)_check_longoptions "$1" "$2"
export EXCLUDE_FILES="${EXCLUDE_FILES:+$EXCLUDE_FILES|}$2"&&shift
;;
-q|--quiet)export QUIET="_print_center_quiet";;
--verbose)export VERBOSE="true" CURL_PROGRESS="";;
--skip-internet-check)\
SKIP_INTERNET_CHECK=":"
;;
''):;;
*)if
[[ $1 == -* ]]
then
[[ $GDL_INSTALLED_WITH == script ]]&&{
case "$1" in
-u|--update)_check_debug&&_update&&{
exit 0||exit 1
}
;;
--uninstall)_check_debug&&_update uninstall&&{
exit 0||exit 1
}
esac
}
printf '%s: %s: Unknown option\nTry '"%s -h/--help"' for more information.\n' "${0##*/}" "$1" "${0##*/}"&&exit 1
else
ID_INPUT_ARRAY+=("$(_extract_id "$1")")
fi
esac
shift
done
_check_debug
[[ -n $QUIET ]]&&export CURL_PROGRESS="-s" ARIA_FLAGS=" $ARIA_FLAGS -q "
declare extra_flags="" flag="" value=""
for var in SPEED_LIMIT USER_AGENT PROXY;do
_set_value i value "$var"
[[ -n $value ]]&&{
_set_value i flag "${var}_FLAG"
extra_flags="$extra_flags $flag $value"
}
done
export ARIA_FLAGS="$ARIA_FLAGS --auto-file-renaming=false --continue $extra_flags"
export CURL_FLAGS="$extra_flags"
[[ -n $OAUTH_ENABLED ]]&&unset API_KEY_DOWNLOAD
[[ -n $API_KEY_DOWNLOAD ]]&&"${UPDATE_DEFAULT_API_KEY:-:}" API_KEY "$API_KEY" "$CONFIG"
[[ -n $DELETE_ACCOUNT_NAME ]]&&_delete_account "$DELETE_ACCOUNT_NAME"
[[ -n $LIST_ACCOUNTS ]]&&_all_accounts
[[ -z ${ID_INPUT_ARRAY[*]} ]]&&{
[[ -z ${DELETE_ACCOUNT_NAME:-${LIST_ACCOUNTS:-$NEW_ACCOUNT_NAME}} ]]&&_short_help
[[ -n ${DELETE_ACCOUNT_NAME:-${LIST_ACCOUNTS:-}} ]]&&exit 0
[[ -n $NEW_ACCOUNT_NAME ]]&&CONTINUE_WITH_NO_INPUT="true"
}
return 0
}
_process_arguments(){
${FOLDERNAME:+mkdir -p $FOLDERNAME}
cd "${FOLDERNAME:-.}" 2>|/dev/null 1>&2||exit 1
unset Aseen&&declare -A Aseen
for id in "${ID_INPUT_ARRAY[@]}";do
{ [[ ${Aseen[$id]} ]]&&continue;}||Aseen[$id]=x
_check_id "$id"||continue
if [[ -n $FOLDER_ID ]];then
_download_folder "$FOLDER_ID" "$NAME" "${PARALLEL_DOWNLOAD:-}"
else
_download_file_main noparse "$FILE_ID" "$NAME" "$SIZE"
fi
done
return 0
}
main(){
[[ $# == 0 ]]&&_short_help
[[ -z $SELF_SOURCE ]]&&{
export UTILS_FOLDER="${UTILS_FOLDER:-$PWD}"
{ . "$UTILS_FOLDER"/auth-utils.bash&&. "$UTILS_FOLDER"/common-utils.bash&&. "$UTILS_FOLDER"/drive-utils.bash&&. "$UTILS_FOLDER"/download-utils.bash;}||{ printf "Error: Unable to source util files.\n"&&exit 1;}
}
_check_bash_version&&set -o errexit -o noclobber -o pipefail
_setup_arguments "$@"||exit 1
"${SKIP_INTERNET_CHECK:-_check_internet}"||exit 1
{ { command -v mktemp 1>|/dev/null&&TMPFILE="$(mktemp -u)";}||TMPFILE="$PWD/.$(_t="$(printf '%(%s)T\n' "-1")"&&printf "%s\n" "$((_t*_t))").LOG";}||exit 1
export TMPFILE
_cleanup(){
[[ -n $SUPPORT_ANSI_ESCAPES ]]&&printf "\033[?25h\033[?7h"
{
[[ -f ${TMPFILE}_ACCESS_TOKEN ]]&&{
. "${TMPFILE}_ACCESS_TOKEN"
[[ $INITIAL_ACCESS_TOKEN == "$ACCESS_TOKEN" ]]||{
_update_config "ACCOUNT_${ACCOUNT_NAME}_ACCESS_TOKEN" "$ACCESS_TOKEN" "$CONFIG"
_update_config "ACCOUNT_${ACCOUNT_NAME}_ACCESS_TOKEN_EXPIRY" "$ACCESS_TOKEN_EXPIRY" "$CONFIG"
}
}||: 1>|/dev/null
[[ -n $ACCESS_TOKEN_SERVICE_PID ]]&&{
token_service_pids="$(ps --ppid="$ACCESS_TOKEN_SERVICE_PID" -o pid=)"
kill "$ACCESS_TOKEN_SERVICE_PID"
}||: 1>|/dev/null
script_children_pids="$(ps --ppid="$MAIN_PID" -o pid=)"
kill $token_service_pids $script_children_pids 1>|/dev/null
rm -f "${TMPFILE:?}"*
export abnormal_exit&&if [[ -n $abnormal_exit ]];then
printf "\n\n%s\n" "Script exited manually."
kill -- -$$&
else
{ _cleanup_config "$CONFIG"&&[[ $GDL_INSTALLED_WITH == script ]]&&_auto_update;} 1>|/dev/null&
fi
} 2>|/dev/null||:
return 0
}
trap 'abnormal_exit="1"; exit' INT TERM
trap '_cleanup' EXIT
trap '' TSTP
export MAIN_PID="$$"
if [[ -n $OAUTH_ENABLED ]];then
"$EXTRA_LOG" "justify" "Checking credentials.." "-"
{ _check_credentials&&_clear_line 1;}||{ "${QUIET:-_print_center}" "normal" "[ Error: Credentials checking failed ]" "="&&exit 1;}
"${QUIET:-_print_center}" "normal" " Account: $ACCOUNT_NAME " "="
[[ -n $CONTINUE_WITH_NO_INPUT ]]&&exit 0
export API_REQUEST_FUNCTION="_api_request_oauth"
else
export API_REQUEST_FUNCTION="_api_request"
fi
START="$(printf '%(%s)T\n' "-1")"
[[ -n $SUPPORT_ANSI_ESCAPES ]]&&printf "\033[?25l"
_process_arguments
END="$(printf '%(%s)T\n' "-1")"
DIFF="$((END-START))"
"${QUIET:-_print_center}" "normal" " Time Elapsed: ""$((DIFF/60))"" minute(s) and ""$((DIFF%60))"" seconds. " "="
}
{ [[ -z $SOURCED_GDL ]]&&main "$@";}||:
