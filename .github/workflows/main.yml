name: Checks
'on':
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '*.md'
jobs:
  tests:
    strategy:
      matrix:
        platform:
          - ubuntu-18.04
          - macos-latest
    name: 'Test on ${{ matrix.platform }}'
    runs-on: '${{ matrix.platform }}'
    if: '!contains(github.event.head_commit.message, ''SKIP-CI'')'
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Install
        run: |
          set -e
          sh install.sh
              PATH="${HOME}/.gdrive-downloader:${PATH}"
              gdl --info
          sh install.sh -U && sh install.sh --posix
              gdl --info
          sh install.sh -U  && sh install.sh -c custom_gdl
              custom_gdl --info
      - name: 'Format, lint ( shellcheck ) and release test'
        run: |
          set -e
          { command -v apt-get && sudo apt-get install aria2 ;} ||
            { command -v brew && brew install aria2 ;}
          shellcheck_v="0.9.0"
          shfmt_v="3.6.0"
          PATH="${HOME}/.bin:${PATH}"
          mkdir -p "${HOME}/.bin"
          case "$(uname -s)" in
              Darwin)
                  wget -q https://github.com/koalaman/shellcheck/releases/download/v${shellcheck_v}/shellcheck-v${shellcheck_v}.darwin.x86_64.tar.xz -O shl.xz
                  wget -q https://github.com/mvdan/sh/releases/download/v${shfmt_v}/shfmt_v${shfmt_v}_darwin_amd64 -O "${HOME}/.bin/shfmt"
                  ;;
              Linux)
                  wget -q https://github.com/koalaman/shellcheck/releases/download/v${shellcheck_v}/shellcheck-v${shellcheck_v}.linux.x86_64.tar.xz -O shl.xz
                  wget -q https://github.com/mvdan/sh/releases/download/v3.6.0/shfmt_v${shfmt_v}_linux_amd64 -O "${HOME}/.bin/shfmt"
                  ;;
          esac
          tar -xf shl.xz
          mv shellcheck*/shellcheck "${HOME}/.bin/"
          rm -rf shl.xz shellcheck*
          chmod +x "${HOME}/.bin/"*

          # merge test
          bash release.sh
          { [ -n "$(git diff)" ] && printf "%s\n" "Error: Run release.sh before pushing the commits" && git diff && exit 1 ;} || :
      - name: Download test
        run: |
          set -e
          # update bash for macos
          command -v brew && brew reinstall bash
          # download tests
          sh test.sh
